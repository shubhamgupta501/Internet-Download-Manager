/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package internetdownloadmanager;

import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author racer
 */
public class StartWindow extends javax.swing.JFrame implements Observer {

    /**
     * Creates new form StartWindow
     */
    private DownloadsTableModel model;
    private Download selectedDownload;
    private boolean clearing;

    public StartWindow() {
        initComponents();
        model = new DownloadsTableModel();
        dTable.setModel(model);
        dTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                tableSelectionChanged();
            }
        });
        dTable.addMouseListener(new MouseAdapter() {
            public void mouseClicke(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    openFile();
                }
            }
        });
        dTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ProgressRenderer renderer = new ProgressRenderer(0, 100);
        renderer.setStringPainted(true); // show progress text
        dTable.setDefaultRenderer(JProgressBar.class, renderer);
// Set table's row height large enough to fit JProgressBar.
        dTable.setRowHeight(
                (int) renderer.getPreferredSize().getHeight());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectedRowPopMenu = new javax.swing.JPopupMenu();
        popPause = new javax.swing.JMenuItem();
        popResume = new javax.swing.JMenuItem();
        popDelete = new javax.swing.JMenuItem();
        popOpen = new javax.swing.JMenuItem();
        popExit = new javax.swing.JMenuItem();
        jButtonResume = new javax.swing.JButton();
        jButtonAddURL = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonOptions = new javax.swing.JButton();
        jButtonScheduler = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        dTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();

        popPause.setText("Pause");
        popPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popPauseActionPerformed(evt);
            }
        });
        selectedRowPopMenu.add(popPause);

        popResume.setText("Resume");
        popResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popResumeActionPerformed(evt);
            }
        });
        selectedRowPopMenu.add(popResume);

        popDelete.setText("Delete");
        popDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popDeleteActionPerformed(evt);
            }
        });
        selectedRowPopMenu.add(popDelete);

        popOpen.setText("Open");
        popOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popOpenActionPerformed(evt);
            }
        });
        selectedRowPopMenu.add(popOpen);

        popExit.setText("Exit");
        selectedRowPopMenu.add(popExit);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Internet Download Manager");

        jButtonResume.setText("Resume");
        jButtonResume.setToolTipText("Start/Resume downloading selected file");
        jButtonResume.setBorderPainted(false);
        jButtonResume.setFocusCycleRoot(true);
        jButtonResume.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonResumeMouseClicked(evt);
            }
        });

        jButtonAddURL.setText("Add URL");
        jButtonAddURL.setToolTipText("Click to Add Url");
        jButtonAddURL.setBorderPainted(false);
        jButtonAddURL.setIconTextGap(0);
        jButtonAddURL.setMaximumSize(new java.awt.Dimension(100, 100));
        jButtonAddURL.setMinimumSize(new java.awt.Dimension(100, 100));
        jButtonAddURL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAddURLMouseClicked(evt);
            }
        });
        jButtonAddURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddURLActionPerformed(evt);
            }
        });

        jButtonStop.setText("Stop");
        jButtonStop.setToolTipText("Stop Downloading file");
        jButtonStop.setBorderPainted(false);
        jButtonStop.setMaximumSize(new java.awt.Dimension(100, 100));
        jButtonStop.setMinimumSize(new java.awt.Dimension(100, 100));
        jButtonStop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonStopMouseClicked(evt);
            }
        });
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.setToolTipText("Remove selected file from the list");
        jButtonDelete.setBorderPainted(false);
        jButtonDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDeleteMouseClicked(evt);
            }
        });

        jButtonOptions.setText("Options");
        jButtonOptions.setToolTipText("Proxy,Passwords and other settings");
        jButtonOptions.setBorderPainted(false);
        jButtonOptions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonOptionsMouseClicked(evt);
            }
        });

        jButtonScheduler.setText("Scheduler");
        jButtonScheduler.setToolTipText("Scheduler and Download queue");
        jButtonScheduler.setBorderPainted(false);

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        dTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        dTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                dTableMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(dTable);

        jMenu1.setText("Tasks");
        jMenu1.setMargin(new java.awt.Insets(5, 5, 5, 5));

        jMenuItem1.setText("Add New Download");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("File");

        jMenuItem6.setText("Stop Download");
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Remove");
        jMenu2.add(jMenuItem7);

        jMenuItem8.setText("Download Now");
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Redownload");
        jMenu2.add(jMenuItem9);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Downloads");

        jMenuItem10.setText("Pause All");
        jMenu3.add(jMenuItem10);

        jMenuItem11.setText("Stop All");
        jMenu3.add(jMenuItem11);

        jMenuItem12.setText("Delete All completed");
        jMenu3.add(jMenuItem12);

        jMenuItem13.setText("Scheduler");
        jMenu3.add(jMenuItem13);

        jMenuItem14.setText("Options");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem14);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButtonAddURL, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonResume, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jButtonScheduler, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 192, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonStop, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonScheduler, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonResume, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddURL, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void jButtonAddURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddURLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAddURLActionPerformed

    private void jButtonAddURLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAddURLMouseClicked
        // TODO add your handling code here:

        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Clipboard clipboard = toolkit.getSystemClipboard();
        String newURLToAdd;
        try {
            newURLToAdd = (String) clipboard.getData(DataFlavor.stringFlavor);
            //System.out.println("String from Clipboard:" + result);
            if (newURLToAdd.startsWith("http://") || newURLToAdd.startsWith("https://")) {
                JOptionPane.showInputDialog(this, "Add URL", "Enter new Address To Download", JOptionPane.PLAIN_MESSAGE, null, null, newURLToAdd);
            } else {
                newURLToAdd = JOptionPane.showInputDialog(this, "Add URL", "Enter new Address to Download", JOptionPane.PLAIN_MESSAGE);
            }

            if (newURLToAdd != null) {
                URL url = new URL(newURLToAdd);
                Download dwn = new Download(url);
                model.addDownload(dwn);
            }
        } catch (UnsupportedFlavorException ex) {
            System.err.println("cannnn");
            Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        //JOptionPane.showMessageDialog(this, evt, newURLToAdd, WIDTH);

    }//GEN-LAST:event_jButtonAddURLMouseClicked

    private void jButtonOptionsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonOptionsMouseClicked
        // TODO add your handling code here:
        OptionFrame opframe = new OptionFrame();
        opframe.setVisible(true);
    }//GEN-LAST:event_jButtonOptionsMouseClicked

    private void jButtonResumeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonResumeMouseClicked
        // TODO add your handling code here:
        if (selectedDownload == null) {

        } else if (selectedDownload.getStatus() != 2) {
            selectedDownload.resume();
        }
    }//GEN-LAST:event_jButtonResumeMouseClicked

    private void jButtonStopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonStopMouseClicked
        // TODO add your handling code here:
        if (selectedDownload == null) {

        }
        if (selectedDownload.getStatus() != 2) {
            selectedDownload.pause();
        }
    }//GEN-LAST:event_jButtonStopMouseClicked

    private void jButtonDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeleteMouseClicked
        // TODO add your handling code here:
        if (selectedDownload == null) {

        } else {
            clearing = true;
            model.clearDownload(dTable.getSelectedRow());
            clearing = false;
            selectedDownload = null;
        }
    }//GEN-LAST:event_jButtonDeleteMouseClicked

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked

    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void dTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dTableMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            if (selectedDownload.getStatus() != 2) {
                JOptionPane.showMessageDialog(this, "Could not open file", "File Not Downloaded Yet", JOptionPane.ERROR_MESSAGE);
            } else {
                openFile();
            }
        }

    }//GEN-LAST:event_dTableMouseClicked

    private void dTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dTableMouseReleased

    }//GEN-LAST:event_dTableMouseReleased

    private void popPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popPauseActionPerformed
        // TODO add your handling code here:
        System.out.println("ho gya pause");
        if (selectedDownload.getStatus() != 2) {
            selectedDownload.pause();
        }

    }//GEN-LAST:event_popPauseActionPerformed

    private void dTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dTableMousePressed
        // TODO add your handling code here:
        System.out.println("daya hath ka kamal");
        if (evt.isPopupTrigger()) {
            selectedRowPopMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_dTableMousePressed

    private void popResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popResumeActionPerformed
        // TODO add your handling code here:
        if (selectedDownload.getStatus() != 2) {
            selectedDownload.resume();
        }
    }//GEN-LAST:event_popResumeActionPerformed

    private void popDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popDeleteActionPerformed
        // TODO add your handling code here:
        clearing = true;
        model.clearDownload(dTable.getSelectedRow());
        clearing = false;
        selectedDownload = null;
    }//GEN-LAST:event_popDeleteActionPerformed

    private void popOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popOpenActionPerformed
        // TODO add your handling code here:
        openFile();
    }//GEN-LAST:event_popOpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StartWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable dTable;
    private javax.swing.JButton jButtonAddURL;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonOptions;
    private javax.swing.JButton jButtonResume;
    private javax.swing.JButton jButtonScheduler;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem popDelete;
    private javax.swing.JMenuItem popExit;
    private javax.swing.JMenuItem popOpen;
    private javax.swing.JMenuItem popPause;
    private javax.swing.JMenuItem popResume;
    private javax.swing.JPopupMenu selectedRowPopMenu;
    // End of variables declaration//GEN-END:variables

    private void tableSelectionChanged() {

        /* Unregister from receiving notifications
         from the last selected download. */
        if (selectedDownload != null) {
            System.out.println("tu to alag hi hai");
            selectedDownload.deleteObserver(StartWindow.this);
        }
        /* If not in the middle of clearing a download,
         set the selected download and register to
         receive notifications from it. */
        if (!clearing && dTable.getSelectedRow() > -1) {
            System.out.println("kitna pareshan karega");
            selectedDownload
                    = model.getDownload(dTable.getSelectedRow());
            selectedDownload.addObserver(StartWindow.this);

        }
    }

    @Override
    public void update(Observable arg0, Object arg1) {
        if (selectedDownload != null && selectedDownload.equals(arg0)) {
            //updateButtons(); //To change body of generated methods, choose Tools | Templates.
        }
    }

    public void openFile() {
        System.out.println("tera to ho gya kaam");
        Desktop desktop;
        File file = new File("/home/racer/Desktop/" + selectedDownload.getFileName());
        if (Desktop.isDesktopSupported()) {
            desktop = Desktop.getDesktop();
            if (desktop != null) {
                try {
                    desktop.open(file);
                } catch (IOException ex) {
                    Logger.getLogger(StartWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

}
